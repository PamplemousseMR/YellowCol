\User declarations :
#include <iostream>
#include <fstream>
#include <cstdlib>

#include "Src/Operator.hpp"
#include "Src/Operator.hxx"
#include "Src/Function.hpp"
#include "Src/Function.hxx"
#include "Src/ArgumentOperator.hpp"
#include "Src/ArgumentOperator.hxx"
#include "Src/MonoOperator.hpp"
#include "Src/MonoOperator.hxx"
#include "Src/DualOperator.hpp"
#include "Src/DualOperator.hxx"
#include "Src/ValueOperator.hpp"
#include "Src/ValueOperator.hxx"

vector< vector< float > > s_table;
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\User functions:
	Operator< float >* generateTree(int _maxDepth)
	{
		Operator< float >* op = nullptr;
		if(_maxDepth == 1)
		{
			if(tossCoin(ARGUMENT_SIZE/(ARGUMENT_SIZE+1.f)))
			{
				op = new ArgumentOperator< float >(static_cast< ARGUMENT >(random(0, ARGUMENT_SIZE)));		

			}
			else
			{
				op = new ValueOperator< float >(static_cast< float >(std::rand()) / static_cast< float >(RAND_MAX));
			}
		}
		else
		{
			int type = random(0, 2);
			if(type == 0)
			{
				op = new MonoOperator< float >(static_cast< MONO_INSTRUCTION >(random(0, 5)), generateTree(_maxDepth-1));
			}
			else
			{
				op = new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(random(0, DUAL_INSTRUCTION_SIZE)), generateTree(_maxDepth-1), generateTree(_maxDepth-1));
			}
		}
		return op;
	}
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\User CUDA:
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\Before everything else function:
	ifstream file ("Data/data.csv");    
	while(!file.eof())
    {
        std::string ligne;
        vector<float> row;
        size_t pos = string::npos;
        getline(file,ligne);
        while((pos = ligne.find_first_of(";")) != string::npos)
        {
            row.push_back(strtof(ligne.substr(0, pos).c_str(),0));
            ligne.erase(0, pos+1);
 
        }
		if(ligne.length() > 0){
			row.push_back(strtof(ligne.c_str(),0));
		}
        s_table.push_back(row);
    }
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\After everything else function:
	bBest->printOn(std::cout);
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\At the beginning of each generation function:
\endstatic_

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\At the end of each generation function:
	bBest->printOn(std::cout);
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\At each generation before reduce function:
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\User classes :
	GenomeClass { 
		int* m_function;	// This is a HACK, it will be changed to void*.
	}
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\GenomeClass::display:
	const Function< float >& function = *(Function< float >*)Genome.m_function;
	std::cout << "	Best score : " << function.bench(s_table) << std::endl;
	std::cout << "	Function " << function << std::endl;
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\GenomeClass::initialiser:	
	try
	{									
		Function< float >* functionProf = new Function< float >(
			new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(1),
				new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(0),
					new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(3), 
						new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(3),
							new MonoOperator< float >(static_cast< MONO_INSTRUCTION >(1),
								new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2),
									new ValueOperator< float >(0.0256411),
									new ArgumentOperator< float >(static_cast< ARGUMENT >(5))
								)
							),	
							new MonoOperator< float >(static_cast< MONO_INSTRUCTION >(1),
								new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(0),
									new ValueOperator< float >(0.434051),
									new ArgumentOperator< float >(static_cast< ARGUMENT >(2))
								)
							)
						), 
						new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(3),
							new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(3),
								new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2), 
									new ArgumentOperator< float >(static_cast< ARGUMENT >(0)), 
									new ArgumentOperator< float >(static_cast< ARGUMENT >(5))
								),
								new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(1), 
									new ArgumentOperator< float >(static_cast< ARGUMENT >(4)), 
									new ArgumentOperator< float >(static_cast< ARGUMENT >(3))
								)
							),
							new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(0),
								new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(3), 
									new ArgumentOperator< float >(static_cast< ARGUMENT >(1)), 
									new ArgumentOperator< float >(static_cast< ARGUMENT >(4))
								),
								new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2), 
									new ValueOperator< float >(0.0898232), 
									new ArgumentOperator< float >(static_cast< ARGUMENT >(3))
								)
							)		
						)
					),
					new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(0),
						new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(3), 
							new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2),
								new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(1),
									new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2), 
										new ArgumentOperator< float >(static_cast< ARGUMENT >(4)), 
										new ArgumentOperator< float >(static_cast< ARGUMENT >(4))
									),
									new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(0), 
										new ArgumentOperator< float >(static_cast< ARGUMENT >(1)), 
										new ArgumentOperator< float >(static_cast< ARGUMENT >(5))
									)
								),
								new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2),
									new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(1), 
										new ArgumentOperator< float >(static_cast< ARGUMENT >(2)), 
										new ValueOperator< float >(0.128389)
									),
									new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2), 
										new ValueOperator< float >(0.0259106), 
										new ArgumentOperator< float >(static_cast< ARGUMENT >(2))
									)
								)		
							), 
							new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(0),
								new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(1),
									new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(3), 
										new ArgumentOperator< float >(static_cast< ARGUMENT >(0)), 
										new ArgumentOperator< float >(static_cast< ARGUMENT >(5))
									),
									new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(0), 
										new ArgumentOperator< float >(static_cast< ARGUMENT >(2)), 
										new ArgumentOperator< float >(static_cast< ARGUMENT >(3))
									)
								),
								new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(3),
									new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(1), 
										new ArgumentOperator< float >(static_cast< ARGUMENT >(0)), 
										new ArgumentOperator< float >(static_cast< ARGUMENT >(3))
									),
									new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(0), 
										new ArgumentOperator< float >(static_cast< ARGUMENT >(4)), 
										new ValueOperator< float >(0.116845)
									)
								)		
							)
						),
						new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(1),
							new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(1), 
								new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2), 
									new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2),
										new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(1),
											new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(0),
												new ArgumentOperator< float >(static_cast< ARGUMENT >(5)),
												new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(3), 
													new ArgumentOperator< float >(static_cast< ARGUMENT >(1)), 
													new ValueOperator< float >(0.708854)
												)
											),
											new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(3),
												new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2), 
													new ArgumentOperator< float >(static_cast< ARGUMENT >(1)), 
													new ArgumentOperator< float >(static_cast< ARGUMENT >(4))
												),
												new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(1), 
													new ArgumentOperator< float >(static_cast< ARGUMENT >(3)), 
													new ArgumentOperator< float >(static_cast< ARGUMENT >(5))
												)
											)		
										),
										new ValueOperator< float >(0.0173784)
									), 
									new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2), 
										new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(0),
											new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2),
												new ValueOperator< float >(0.000596634),
												new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(0),
													new ArgumentOperator< float >(static_cast< ARGUMENT >(0)),
													new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2),
														new ArgumentOperator< float >(static_cast< ARGUMENT >(1)), 
														new ArgumentOperator< float >(static_cast< ARGUMENT >(1))
													)
												)		
											),
											new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2),
												new ValueOperator< float >(0.0087028),
												new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(0),
													new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(3), 
														new ArgumentOperator< float >(static_cast< ARGUMENT >(3)), 
														new ArgumentOperator< float >(static_cast< ARGUMENT >(4))
													),
													new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2), 
														new ArgumentOperator< float >(static_cast< ARGUMENT >(4)), 
														new ArgumentOperator< float >(static_cast< ARGUMENT >(4))
													)
												)		
											)
										), 
										new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2),
											new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(0),
												new MonoOperator< float >(static_cast< MONO_INSTRUCTION >(1),
													new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2), 
														new ValueOperator< float >(0.0234898), 
														new ArgumentOperator< float >(static_cast< ARGUMENT >(5))
													)
												),
												new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(0),
													new ValueOperator< float >(0.18091),
													new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2), 
														new ValueOperator< float >(0.0105248), 
														new ArgumentOperator< float >(static_cast< ARGUMENT >(1))
													)
												)		
											),
											new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2),
												new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(3),
													new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2), 
														new ValueOperator< float >(0.0494235), 
														new ValueOperator< float >(0.999395)
													),
													new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(3), 
														new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(0), 
															new ArgumentOperator< float >(static_cast< ARGUMENT >(2)), 
															new ArgumentOperator< float >(static_cast< ARGUMENT >(2))
														),
														new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2), 
															new ValueOperator< float >(0.256264), 
															new ArgumentOperator< float >(static_cast< ARGUMENT >(3))
														)
													)
												),
												new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(1),
													new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2), 
														new ArgumentOperator< float >(static_cast< ARGUMENT >(5)), 
														new ValueOperator< float >(0.0191166)
													),
													new ValueOperator< float >(0.779875)
												)		
											)
										)
									)
								),
								new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(3),
									new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(3),
										new MonoOperator< float >(static_cast< MONO_INSTRUCTION >(1),
											new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2), 
												new ValueOperator< float >(0.0236271), 
												new ArgumentOperator< float >(static_cast< ARGUMENT >(5))
											)
										),
										new MonoOperator< float >(static_cast< MONO_INSTRUCTION >(1),
											new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(0), 
												new ArgumentOperator< float >(static_cast< ARGUMENT >(2)), 
												new ArgumentOperator< float >(static_cast< ARGUMENT >(2))
											)
										)		
									),
									new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(0),
										new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2), 
											new MonoOperator< float >(static_cast< MONO_INSTRUCTION >(1), 
												new ArgumentOperator< float >(static_cast< ARGUMENT >(5))
											),
											new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2), 
												new ArgumentOperator< float >(static_cast< ARGUMENT >(4)), 
												new ValueOperator< float >(0.975982)
											)
										),
										new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2), 
											new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(1), 
												new ValueOperator< float >(0.999775), 
												new ArgumentOperator< float >(static_cast< ARGUMENT >(3))
											),
											new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(3), 
												new ArgumentOperator< float >(static_cast< ARGUMENT >(2)), 
												new ArgumentOperator< float >(static_cast< ARGUMENT >(4))
											)
										)
									)
								)
							),
							new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(3), 
								new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(3),
									new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2),
										new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(0), 
											new ValueOperator< float >(0.99968), 
											new ArgumentOperator< float >(static_cast< ARGUMENT >(1))
										),
										new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2), 
											new ArgumentOperator< float >(static_cast< ARGUMENT >(5)), 
											new ValueOperator< float >(0.0238847)
										)
									),
									new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(0),
										new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(1), 
											new ArgumentOperator< float >(static_cast< ARGUMENT >(0)), 
											new ArgumentOperator< float >(static_cast< ARGUMENT >(3))
										),
										new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(3), 
											new ArgumentOperator< float >(static_cast< ARGUMENT >(0)), 
											new ArgumentOperator< float >(static_cast< ARGUMENT >(4))
										)
									)		
								), 
								new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(0),
									new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(1), 
										new ValueOperator< float >(0.0646916), 
										new ValueOperator< float >(0.620652)
									),
									new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(1),
										new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2), 
											new ValueOperator< float >(0.0250885), 
											new ArgumentOperator< float >(static_cast< ARGUMENT >(5))
										),
										new ValueOperator< float >(0.717881)
									)		
								)
							)
						)
					)		
				),
				new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(3),
					new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(0),
						new MonoOperator< float >(static_cast< MONO_INSTRUCTION >(1),
							new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(1), 
								new ArgumentOperator< float >(static_cast< ARGUMENT >(2)), 
								new ValueOperator< float >(0.136044)
							)
						),
						new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(3),
							new MonoOperator< float >(static_cast< MONO_INSTRUCTION >(1), 
								new ArgumentOperator< float >(static_cast< ARGUMENT >(0))
							),
							new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(3), 
								new ArgumentOperator< float >(static_cast< ARGUMENT >(3)), 
								new ArgumentOperator< float >(static_cast< ARGUMENT >(4))
							)
						)		
					),
					new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2),
						new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(1), 
							new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(1), 
								new ArgumentOperator< float >(static_cast< ARGUMENT >(0)), 
								new ValueOperator< float >(0.82492)
							),
							new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2), 
								new ArgumentOperator< float >(static_cast< ARGUMENT >(1)), 
								new ArgumentOperator< float >(static_cast< ARGUMENT >(3))
							)
						),
						new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(0), 
							new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2), 
								new ValueOperator< float >(0.0490735), 
								new ValueOperator< float >(0.975982)
							),
							new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(2), 
								new ValueOperator< float >(0.0087028), 
								new ArgumentOperator< float >(static_cast< ARGUMENT >(1))
							)
						)
					)
				)
			)
		);	
									
		std::cout << "(" << functionProf <<  ")" << std::endl << "ecart-type =" << functionProf->bench(s_table);
		exit(0);
		
		Operator< float >* op = generateTree(random(1, 6));		

		Function< float >& function = *(new Function< float >(op));
		Genome.m_function = &function;
	} 
	catch(const std::exception& _e)
	{
		std::cerr << "Initialiser error : " << _e.what() << std::endl;
		std::exit(1);
	}
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\GenomeClass::crossover:
	try
	{
		const Function< float >& firstFunction = *(Function< float >*)parent1.m_function;
		const Function< float >& secondFunction = *(Function< float >*)parent2.m_function;
		Function< float >& childFunction = *(Function< float >*)child.m_function;

		int percent = random(0, 101);
		long long firstNode = (percent/100.0) * (firstFunction.getNumberOfChildOperator()-1);
		long long secondNode = (percent/100.0) * (secondFunction.getNumberOfChildOperator()-1);
	  	
	  	Operator< float >* secondOperator = (*secondFunction.getOperator())[secondNode];

	    Operator< float >* copy = Operator< float>::copy(secondOperator);

		try{
  			childFunction.setOperator(firstNode, copy);
  		}
  		catch(...)
  		{
  			childFunction.setOperator(firstNode-1, copy);	
  		}
	} 
	catch(const std::exception& _e)
	{
		std::cerr << "Crossover error : " << _e.what() << std::endl;
		std::exit(1);
	}
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\GenomeClass::mutator:
	try
	{
	  	Function< float >& function = *(Function< float >*)Genome.m_function;
		int rand = random(0, 1001);
		function.mutate(rand);
	}
	catch(const std::exception& _e)
	{
		std::cerr << "Mutator error : " << _e.what() << std::endl;
		std::exit(1);
	}
  	return 1;
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\GenomeClass::evaluator:
	try
	{
		Function< float >* function = (Function< float >*)Genome.m_function;
		return function->bench(s_table);
	}
	catch(const std::exception& _e)
	{
		std::cerr << "Evaluator error : " << _e.what() << std::endl;
		std::exit(1);
	}
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\User Makefile options:
	CPPFLAGS += -std=c++11 -o3
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\Default run parameters :         // Please let the parameters appear in this order
Number of generations : 2000     // NB_GEN
Time limit: 0                     // In seconds, 0 to deactivate
Population size : 100000             // POP_SIZE
Offspring size : 60%             // 40% 
Mutation probability : 0.6      // MUT_PROB
Crossover probability : 0.7         // XOVER_PROB
Evaluator goal : minimise         // Maximise
Selection operator: Roulette 2 
Surviving parents: 50%           // percentage or absolute
Surviving offspring: 100%
Reduce parents operator: Roulette 2
Reduce offspring operator: Roulette 2
Final reduce operator: Roulette 3

Elitism: Strong                     // Weak or Strong
Elite: 10
Print stats: true                 // Default: 1
Generate csv stats file:false
Generate gnuplot script:false
Generate R script:false
Plot stats:true                   // Default: 0

Remote island model: true
IP file: ipexplorer.txt           // File containing all the remote island's IP
Server port : 2929
Migration probability: 0.15       // 0.15 or 0.5

Save population: false
Start from file:false
\end
