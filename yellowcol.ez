\User declarations :
#include <iostream>
#include <fstream>
#include <cstdlib>

#include "Src/Operator.hpp"
#include "Src/Function.hpp"
#include "Src/Function.hxx"
#include "Src/ValueOperator.hpp"
#include "Src/ValueOperator.hxx"
#include "Src/MonoOperator.hpp"
#include "Src/MonoOperator.hxx"
#include "Src/DualOperator.hpp"
#include "Src/DualOperator.hxx"

vector< vector< float > > s_table;

\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\User functions:
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\User CUDA:
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\Before everything else function:
	ifstream file ("Data/data.csv");    
	while(!file.eof())
    {
        std::string ligne;
        vector<float> row;
        size_t pos = string::npos;
        getline(file,ligne);
        while((pos = ligne.find_first_of(";")) != string::npos)
        {
            row.push_back(strtof(ligne.substr(0, pos).c_str(),0));
            ligne.erase(0, pos+1);
 
        }
		if(ligne.length() > 0){
			row.push_back(strtof(ligne.c_str(),0));
		}
        s_table.push_back(row);
    }
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\After everything else function:
	bBest->printOn(std::cout);
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\At the beginning of each generation function:
\endstatic_

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\At the end of each generation function:
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\At each generation before reduce function:
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\User classes :
	GenomeClass { 
		int* m_function;	// This is a HACK, it will be changed to void*.
	}
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\GenomeClass::display:
	std::cout << "Display" << std::endl;
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\GenomeClass::initialiser:	
	try{
		Operator< float >* op = nullptr;

		const bool mono = static_cast< bool >(random(0, 2));
		if(mono)
		{
			ValueOperator< float >* value = new ValueOperator< float >(static_cast< ARGUMENT >(random(0, 6)));
			op = new MonoOperator< float >(static_cast< MONO_INSTRUCTION >(random(0, 5)), value);
		}
		else
		{
			ValueOperator< float >* value1 = new ValueOperator< float >(static_cast< ARGUMENT >(random(0, 6)));
			ValueOperator< float >* value2 = new ValueOperator< float >(static_cast< ARGUMENT >(random(0, 6)));
			op = new DualOperator< float >(static_cast< DUAL_INSTRUCTION >(random(0, 6)), value1, value2);
		}

		Function< float >& function = *(new Function< float >(op));
		Genome.m_function = &function;
		std::cout << "Initialiser " << function << " = " << function.compute(1,1,1,1,1,1) << std::endl;
	} 
	catch(const std::exception& _e)
	{
		std::cerr << "Initialiser error : " << _e.what() << std::endl;
		std::exit(1);
	}
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\GenomeClass::crossover:
	try{
		const Function< float >& firstParent = *(Function< float >*)parent1.m_function;
		const Function< float >& secondParent = *(Function< float >*)parent2.m_function;
		
		long int nLocus = random(0, 101);
		long long firstPercent = (nLocus/100.0) * firstParent.getNumberOfChildOperator();
		long long secondPercent = (nLocus/100.0) * secondParent.getNumberOfChildOperator();
	  	
		for(int i=0 ; i<firstPercent ; ++i)
		{
			//child.m_function
		}

	  	//child.x[i]=parent2.x[i];

  		std::cout << "Crossover " << firstParent << " = " << firstParent.compute(1,1,1,1,1,1) << std::endl;
	} 
	catch(const std::exception& _e)
	{
		std::cerr << "Crossover error : " << _e.what() << std::endl;
		std::exit(1);
	}
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\GenomeClass::mutator:
  	return 1;
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\GenomeClass::evaluator:
	Function< float >* function = (Function< float >*)Genome.m_function;
	return function->bench(s_table);
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\User Makefile options:
	CPPFLAGS += -std=c++11 -o3
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\Default run parameters :         // Please let the parameters appear in this order
Number of generations : 5     // NB_GEN
Time limit: 0                     // In seconds, 0 to deactivate
Population size : 10             // POP_SIZE
Offspring size : 90%             // 40% 
Mutation probability : 0.4        // MUT_PROB
Crossover probability : 1         // XOVER_PROB
Evaluator goal : minimise         // Maximise
Selection operator: Tournament 2 
Surviving parents: 50%           // percentage or absolute
Surviving offspring: 100%
Reduce parents operator: Tournament 2
Reduce offspring operator: Tournament 2
Final reduce operator: Tournament 3

Elitism: Weak                     // Weak or Strong
Elite: 1
Print stats: true                 // Default: 1
Generate csv stats file:false
Generate gnuplot script:false
Generate R script:false
Plot stats:true                   // Default: 0

Remote island model: true
IP file: ipexplorer.txt           // File containing all the remote island's IP
Server port : 2929
Migration probability: 0.15       // 0.15 or 0.5

Save population: false
Start from file:false
\end
